package jooq.examples.springxml1;

import jooq.examples.generated.tables.Author;
import jooq.examples.generated.tables.Book;
import jooq.examples.generated.tables.BookStore;
import jooq.examples.generated.tables.BookToBookStore;
import jooq.examples.generated.tables.records.AuthorRecord;
import org.jooq.DSLContext;
import org.jooq.Record3;
import org.jooq.Result;
import org.jooq.tools.JooqLogger;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import java.math.BigInteger;
import java.util.logging.ConsoleHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import static jooq.examples.generated.tables.Author.AUTHOR;
import static jooq.examples.generated.tables.Book.BOOK;
import static jooq.examples.generated.tables.BookStore.BOOK_STORE;
import static jooq.examples.generated.tables.BookToBookStore.BOOK_TO_BOOK_STORE;
import static org.jooq.impl.DSL.countDistinct;

//Check how ExceptionTranslator works
public class SpringExampleExceptionMain {
	static {
		//LoggerListener
		JooqLogger log = JooqLogger.getLogger(SpringExampleExceptionMain.class);
		log.globalThreshold(org.jooq.Log.Level.DEBUG);
		
		System.out.println(Logger.getLogger("test").isLoggable(Level.INFO));
		
		log.debug("Helo");
		
		System.setProperty("java.util.logging.SimpleFormatter.format", "[%1$tF %1$tT] [%4$-7s] %5$s %n");
		ConsoleHandler consoleHandler = new ConsoleHandler();
		consoleHandler.setLevel(Level.ALL);
		consoleHandler.setFormatter(new SimpleFormatter());

		Logger app1 = Logger.getLogger(""); // If you want to log everything just create logger with empty
													// string
		app1.setLevel(Level.INFO);
		app1.addHandler(consoleHandler);

		Logger app2 = Logger.getLogger("com.oracle");
		app2.setLevel(Level.INFO);
		app2.addHandler(consoleHandler);

	}
	private static ApplicationContext context;

	public static void main(String[] args) throws Exception {
		context = new ClassPathXmlApplicationContext("springxml-1-nonxa-config.xml");
		for (String s : context.getBeanDefinitionNames()) {
			System.out.println(s);
		}

		DSLContext create = context.getBean("dsl", org.jooq.impl.DefaultDSLContext.class);

		// All of these tables were generated by jOOQ's code gen
		Book b = BOOK.as("b");
		Author a = AUTHOR.as("a");
		BookStore s = BOOK_STORE.as("s");
		BookToBookStore t = BOOK_TO_BOOK_STORE.as("t");

		Result<Record3<String, String, Integer>> result = create
				.select(a.FIRST_NAME, a.LAST_NAME, countDistinct(s.NAME)).from(a).join(b).on(b.AUTHOR_ID.equal(a.ID))
				.join(t).on(t.BOOK_ID.eq(b.ID.cast(BigInteger.class))).join(s).on(t.NAME.eq(s.NAME))
				.groupBy(a.FIRST_NAME, a.LAST_NAME).orderBy(countDistinct(s.NAME).desc()).fetch();

		System.out.println(result);

		AuthorRecord author = create.fetchOne(AUTHOR, AUTHOR.ID.eq(4));

		System.out.println(author);

		BookService bookService = context.getBean("books", BookService.class);
		bookService.getDsl();
		bookService.create(8, 1, "My Title", "thanuj");

		oracle.ucp.admin.UniversalConnectionPoolManager ucpm = context.getBean("ucpm",
				oracle.ucp.admin.UniversalConnectionPoolManager.class);
		oracle.ucp.jdbc.PoolDataSource pool = context.getBean("dataSource", oracle.ucp.jdbc.PoolDataSource.class);
		ucpm.destroyConnectionPool(pool.getConnectionPoolName());
	}

}
