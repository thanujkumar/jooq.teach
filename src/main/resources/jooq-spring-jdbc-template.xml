<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:ctx="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">

    <!-- set few java system properties for DMS (DMS is still not working, looks only with Fussion Middleware it is associated -->
    <!--  none, normal, heavy, and all -->
    <!-- https://docs.oracle.com/cd/B14099_19/core.1012/b14001/dms.htm -->
    <!-- https://docs.oracle.com/en/middleware/fusion-middleware/12.2.1.3/asper/using-oracle-dynamic-monitoring-service.html#GUID-D445E832-2B03-4EBB-8380-C5C2370A6A58 -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
          p:targetObject="#{@systemProperties}" p:targetMethod="putAll">
        <property name="arguments">
            <util:properties>
                <prop key="oracle.dms.sensors">all</prop>
                <prop key="SQLText">true</prop>
            </util:properties>
        </property>
    </bean>

    <!-- This is needed if you want to use the @Transactional annotation -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <ctx:annotation-config/>

    <bean id="lifecycle" class="jooq.examples.spring.jdbctemplate.ContextInitializeAndShutdownListener"/>

    <bean id="ucpm" class="oracle.ucp.admin.UniversalConnectionPoolManagerImpl"
          factory-method="getUniversalConnectionPoolManager" depends-on="dataSource"/>

    <bean id="dataSourceWrapper" class="jooq.examples.oracle.e2e.metrics.OracleE2EWrapper" depends-on="dataSource">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="dataSource"
          class="oracle.ucp.jdbc.PoolDataSourceImpl"
          lazy-init="false"> <!-- non xa oracle.ucp.jdbc.PoolDataSourceImpl xa: oracle.ucp.jdbc.PoolXADataSourceImpl-->
        <property name="connectionFactoryClassName"
                  value="oracle.jdbc.pool.OracleDataSource"/> <!-- non xa oracle.jdbc.pool.OracleDataSource , xa: oracle.jdbc.xa.client.OracleXADataSource-->
        <property name="URL"
                  value="jdbc:oracle:thin:@(DESCRIPTION=(SOURCE_ROUTE=YES) (ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=orcl)))"/>
        <property name="user" value="jooqdata"/>
        <property name="password" value="jooqdata"/>
        <property name="maxPoolSize" value="5"/>
        <property name="minPoolSize" value="5"/>
        <property name="initialPoolSize" value="5"/>
        <property name="connectionPoolName" value="ORA_XA_UCP"/>
        <property name="maxStatements" value="20" />
        <property name="connectionProperties">
            <props>
                <prop key="#{T(oracle.jdbc.OracleConnection).CONNECTION_PROPERTY_THIN_READ_TIMEOUT}">90000</prop>
                <prop key="#{T(oracle.jdbc.OracleConnection).CONNECTION_PROPERTY_THIN_VSESSION_PROGRAM}">JOOQDATA</prop>
                <prop key="#{T(oracle.jdbc.OracleConnection).CONNECTION_PROPERTY_DEFAULT_ROW_PREFETCH}">500</prop>
                <!-- Setting below properties to true may have a negative impact on performance. You should only set these properties to true when you need to collect JDBC statement metrics.
                     Set below to false and use  end-to-end metrics-->
                <prop key="oracle.jdbc.DMSStatementCachingMetrics">false</prop>
                <prop key="oracle.jdbc.DMSStatementMetrics">false</prop>
            </props>
        </property>
    </bean>

    <!-- Configure Spring's transaction manager to use a DataSource -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceWrapper"/>
    </bean>

    <!-- Configure jOOQ's TransactionProvider as a proxy to Spring's transaction manager -->
    <bean id="transactionProvider"
          class="jooq.examples.spring.jdbctemplate.JdbcTemplateTransactionProvider">
    </bean>

    <!-- Configure jOOQ's ConnectionProvider to use Spring's TransactionAwareDataSourceProxy,
        which can dynamically discover the transaction context -->
    <bean id="transactionAwareDataSource"
          class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="dataSourceWrapper"/>
    </bean>

    <bean class="org.jooq.impl.DataSourceConnectionProvider" name="connectionProvider">
        <constructor-arg ref="transactionAwareDataSource"/>
    </bean>

    <!-- https://www.baeldung.com/spring-jdbc-jdbctemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="transactionAwareDataSource"/>
    </bean>

    <bean id="exceptionTranslator" class="jooq.examples.tools.ExceptionTranslator"/>

    <bean id="queryPerf" class="jooq.examples.tools.QueryPerformanceListener"/>

    <!-- Invoking an internal, package-private constructor for the example Implement your own Configuration for more reliable behaviour -->
    <bean class="org.jooq.impl.DefaultConfiguration" name="config">
        <property name="SQLDialect">
            <value type="org.jooq.SQLDialect">ORACLE20C</value>
        </property>
        <property name="connectionProvider" ref="connectionProvider"/>
        <property name="transactionProvider" ref="transactionProvider"/>
        <property name="executeListenerProvider">
            <array>
                <bean class="org.jooq.impl.DefaultExecuteListenerProvider">
                    <constructor-arg index="0" ref="exceptionTranslator"/>
                </bean>
                <bean class="org.jooq.impl.DefaultExecuteListenerProvider">
                    <constructor-arg index="0" ref="queryPerf"/>
                </bean>

            </array>
        </property>
        <property name="settings">
            <bean class="org.jooq.conf.Settings">
                <property name="renderFormatted" value="false"/>
                <property name="renderQuotedNames" value="#{T(org.jooq.conf.RenderQuotedNames).NEVER}"/>
                <!-- https://www.jooq.org/doc/latest/manual/sql-execution/logging/ -->
                <property name="executeLogging" value="false"/>
                <property name="executeWithOptimisticLocking" value="true"/>
                <property name="mapJPAAnnotations" value="false"/>
            </bean>
        </property>
    </bean>


    <!-- Configure the DSL object, optionally overriding jOOQ Exceptions with Spring Exceptions -->
    <bean id="dslContext" class="org.jooq.impl.DefaultDSLContext">
        <constructor-arg ref="config"/>
    </bean>

    <bean id="bookService" class="jooq.examples.spring.jdbctemplate.JdbcTemplateDefaultBookService"/>

</beans>