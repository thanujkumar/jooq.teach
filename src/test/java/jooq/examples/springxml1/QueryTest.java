package jooq.examples.springxml1;

import static jooq.examples.generated.tables.Author.AUTHOR;
import static jooq.examples.generated.tables.Book.BOOK;
import static jooq.examples.generated.tables.BookStore.BOOK_STORE;
import static jooq.examples.generated.tables.BookToBookStore.BOOK_TO_BOOK_STORE;
import static org.jooq.impl.DSL.countDistinct;
import static org.junit.Assert.assertEquals;

import java.math.BigInteger;

import org.jooq.DSLContext;
import org.jooq.Record3;
import org.jooq.Result;
import org.junit.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.platform.runner.JUnitPlatform;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import jooq.examples.generated.tables.Author;
import jooq.examples.generated.tables.Book;
import jooq.examples.generated.tables.BookStore;
import jooq.examples.generated.tables.BookToBookStore;

//@RunWith(SpringJUnit4ClassRunner.class)
@RunWith(JUnitPlatform.class)
@ExtendWith(SpringExtension.class)
@ContextConfiguration("classpath:springxml-1-nonxa-config.xml")
public class QueryTest  {
	
	@Autowired(required=true)
    DSLContext dsl;
	

	@Test
	public void testJoin() throws Exception {
		DSLContext create = dsl;
		// All of these tables were generated by jOOQ's Maven plugin
		Book b = BOOK.as("b");
		Author a = AUTHOR.as("a");
		BookStore s = BOOK_STORE.as("s");
		BookToBookStore t = BOOK_TO_BOOK_STORE.as("t");
		
		Result<Record3<String, String, Integer>> result = create
				.select(a.FIRST_NAME, a.LAST_NAME, countDistinct(s.NAME)).from(a).join(b).on(b.AUTHOR_ID.eq(a.ID))
				.join(t).on(t.BOOK_ID.eq(b.ID.cast(BigInteger.class))).join(s).on(t.NAME.eq(s.NAME))
				.groupBy(a.FIRST_NAME, a.LAST_NAME).orderBy(countDistinct(s.NAME).desc()).fetch();
		
		assertEquals(1, result.size());
		assertEquals("Paulo", result.getValue(0, a.FIRST_NAME));
		//assertEquals("George", result.getValue(1, a.FIRST_NAME));
		assertEquals("Coelho", result.getValue(0, a.LAST_NAME));
		//assertEquals("Orwell", result.getValue(1, a.LAST_NAME));
		assertEquals(Integer.valueOf(1), result.getValue(0, countDistinct(s.NAME)));
		//assertEquals(Integer.valueOf(2), result.getValue(1, countDistinct(s.NAME)));
	}
	
}
